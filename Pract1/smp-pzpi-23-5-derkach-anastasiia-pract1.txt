МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
Харківський національний університет радіоелектроніки



Кафедра «Програмна інженерія»


ЗВІТ
з практичного заняття №1
з дисципліни «Скриптові мови програмування»










Виконала:									      Перевірив:
ст. гр. ПЗПІ-23-5								ст. викл. каф. ПІ
Деркач Анастасія								Сокорчук І. П.



Харків 2025


1 СИНТАКСИС ТА МОЖЛИВОСТІ КОМАНДНОГО ІНТЕРПРЕТАТОРА BASH
1.1	ЗАВДАННЯ

Написати Bash скрипт, який друкуватиме на екрані ялинку із
двох ярусів гілок, стовбура та шару снігу.
Наприклад таку:
     *  
    ###  
   *****  
  #######  
 *********  
    ###  
   *****  
  #######  
 *********  
    ###  
    ###  
***********  
Ялинка повинна бути симетричною.
Яруси гілок повинні утворювати правильні рівнобедрені трикутники у яких сусідні рядки відрізняються на два символи та складаються почергово або з символів «*» або з символів «#». 
Ширина усіх ярусів гілок повинна бути на 2 символи вужча ніж ширина снігу.
Висота стовбура та товщина снігу мають бути завжди такі, як у прикладі.
Висота ялинки у рядках разом з шаром снігу та ширина шару снігу в символах вказується скрипту в його параметрах при запуску.
Параметри скрипта повинні мати додатнє значення.
Вказані значення повинні округлятися до потрібних у меншу сторону.
Якщо за вказаними при запуску скрипта значеннями зобразити ялинку на екрані неможливо, скрипт повинен вивести у потік помилок сповіщення про неправильне значення аргумента і повернути відповідний результат у батьківський процес.
У скрипті потрібно обовʼязково використати такі конструкції:
if ... then ... fi  
while ... do ... done  
until ... do ... done  
for ... in .. do ... done  
for ((...)); do ... done  
У скрипті також потрібно використати функцію.  

1.2	ОПИС ВИКОНАНОЇ РОБОТИ

1.	Першим кроком створюємо файл на сервері за допомогою команди 

1 touch ~/pzpi-23-5-derkach-anastasiia-task1

2.	Далі починаємо створення програми. Перш за все, потрібно перевірити, чи правильні аргументи передані в скрипт. Це забезпечить правильне функціонування програми та запобігає помилкам, якщо аргументи не відповідають вимогам.

1 if [[ $# -ne 2 ]] || [[ $1 -lt 8 ]] || [[ $2 -lt $(( $1 - 1 )) ]]; 2 then
3     echo "Failed to build the tree" >&2
4     exit 1
5 fi

	Перша умова [[ $# -ne 2 ]] перевіряє, чи передано два аргументи. Якщо їх менше або більше — виводиться помилка.
Друга умова [[ $1 -lt 8 ]] перевіряє, чи висота ялинки (перший параметр) більше або рівна 8.
Третя умова [[ $2 -lt $(( $1 - 1 )) ]] перевіряє, чи ширина снігу (другий параметр) є більшою, ніж висота ялинки мінус один, щоб забезпечити правильну симетрію.
Якщо хоча б одна з умов невірна, скрипт виводить повідомлення про помилку та завершується з кодом помилки.

3.	Після перевірки параметрів необхідно визначити висоту та ширину снігу для правильної побудови ялинки.


1 HEIGHT=$(( $1 / 2 * 2 ))
2 SNOW_WIDTH=$(( $HEIGHT - 1 ))

4.	Ялинка складається з двох ярусів гілок, які по черзі малюються символами * та #. Для цього створюємо функцію draw_branch_layer, яка малює кожен ярус ялинки. У додатку А наведений код цієї функції.
5.	Стовбур ялинки має висоту 2 рядки та ширину, що дорівнює 3 символам (###). Потрібно забезпечити правильне вирівнювання стовбура в середині снігу.

1 for trunk in 1 2; do
2     printf "%${padding}s###\n"
3 done

Цикл for використовується для виведення двох рядків стовбура, причому кожен рядок має бути відцентрованим з допомогою змінної padding.
6.	Шар снігу має бути виведений як рядок з символів *. Ширина снігу визначається параметром SNOW_WIDTH.

1 i=0
2 while [[ $i -lt $SNOW_WIDTH ]]; do
3     printf "*"
4     ((i++))
5 done
6 printf "\n"

Цикл while малює сніг по одному символу за раз, поки не досягне заданої ширини.

1.3	ВИСНОВКИ

На цьому практичному занятті я навчилася писати Bash-скрипти для автоматизації завдань, що включають перевірку вхідних параметрів, використання циклів та функцій для виконання складних операцій. Основною метою було створення скрипта, який виводить на екран симетричну ялинку з гілками, стовбуром і снігом на основі заданих параметрів. Я освоїла використання різних конструкцій Bash, таких як if, while, until, for, а також вдосконалила навички роботи з математичними операціями та умовними виразами.
Це заняття дозволило розвинути вміння працювати з текстовими операціями в Bash, а також поглибити розуміння логіки програмування в командному рядку. Я також отримала досвід у створенні багатоступеневих перевірок та функціональних блоків коду для виконання конкретних завдань. 

ДОДАТОК А
Відеозапис

Роботу було захищено на парі.

ДОДАТОК Б
Код функції draw_branch_layer

1  draw_branch_layer() {
2     local layer_height=$(( ($HEIGHT - 2) / 2 ))
3     local max_width=$(( $SNOW_WIDTH - 2 ))
4     local symbol="*"
5
6     for ((i = 1; i <= layer_height; i++)); do
7         local width=$(( 1 + (i - 1) * 2 ))
8         local padding=$(( ((max_width - width) / 2) + 1 ))
9
10        printf "%${padding}s" ""
11        printf "%${width}s\n" | tr ' ' "$symbol"
12
13        if [[ "$symbol" == "*" ]]; then
14            symbol="#"
15        else
16            symbol="*"
17        fi
18    done
19
20    i=2
21    until [[ $i -gt layer_height ]]; do
22        local width=$(( 1 + (i - 1) * 2 ))
23        local padding=$(( ((max_width - width) / 2) + 1 ))
24
25        printf "%${padding}s" ""
26        printf "%${width}s\n" | tr ' ' "$symbol"
27
28        if [[ "$symbol" == "*" ]]; then
29            symbol="#"
30        else
31            symbol="*"
32        fi
33        ((i++))
34    done
35 }

